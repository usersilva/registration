<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.EntityFramework.SqlServer</name>
    </assembly>
    <members>
        <member name="T:System.Data.Entity.Infrastructure.MicrosoftLocalDbConnectionFactory">
            <summary>
            Instances of this class are used to create DbConnection objects for
            SQL Server LocalDb based on a given database name or connection string.
            </summary>
            <remarks>
            An instance of this class can be set on the <see cref="T:System.Data.Entity.Database" /> class or in the
            app.config/web.config for the application to cause all DbContexts created with no
            connection information or just a database name to use SQL Server LocalDb by default.
            This class is immutable since multiple threads may access instances simultaneously
            when creating connections.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MicrosoftLocalDbConnectionFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory"/> class.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MicrosoftLocalDbConnectionFactory.#ctor(System.String)">
            <summary>
            Creates a new instance of the connection factory for the given version of LocalDb.
            For SQL Server 2012 LocalDb use "v11.0".
            For SQL Server 2014 and later LocalDb use "mssqllocaldb".
            </summary>
            <param name="localDbVersion"> The LocalDb version to use. </param>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MicrosoftLocalDbConnectionFactory.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of the connection factory for the given version of LocalDb.
            For SQL Server 2012 LocalDb use "v11.0".
            For SQL Server 2014 and later LocalDb use "mssqllocaldb".
            </summary>
            <param name="localDbVersion"> The LocalDb version to use. </param>
            <param name="baseConnectionString"> The connection string to use for options to the database other than the 'Initial Catalog', 'Data Source', and 'AttachDbFilename'. The 'Initial Catalog' and 'AttachDbFilename' will be prepended to this string based on the database name when CreateConnection is called. The 'Data Source' will be set based on the LocalDbVersion argument. </param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.MicrosoftLocalDbConnectionFactory.BaseConnectionString">
            <summary>
            The connection string to use for options to the database other than the 'Initial Catalog',
            'Data Source', and 'AttachDbFilename'.
            The 'Initial Catalog' and 'AttachDbFilename' will be prepended to this string based on the
            database name when CreateConnection is called.
            The 'Data Source' will be set based on the LocalDbVersion argument.
            The default is 'Integrated Security=True;'.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MicrosoftLocalDbConnectionFactory.CreateConnection(System.String)">
            <summary>
            Creates a connection for SQL Server LocalDb based on the given database name or connection string.
            If the given string contains an '=' character then it is treated as a full connection string,
            otherwise it is treated as a database name only.
            </summary>
            <param name="nameOrConnectionString"> The database name or connection string. </param>
            <returns> An initialized DbConnection. </returns>
        </member>
        <member name="T:System.Data.Entity.Infrastructure.MicrosoftSqlConnectionFactory">
            <summary>
            Instances of this class are used to create DbConnection objects for
            SQL Server based on a given database name or connection string. By default, the connection is
            made to '.\SQLEXPRESS'.  This can be changed by changing the base connection
            string when constructing a factory instance.
            </summary>
            <remarks>
            An instance of this class can be set on the <see cref="T:System.Data.Entity.Database" /> class to
            cause all DbContexts created with no connection information or just a database
            name or connection string to use SQL Server by default.
            This class is immutable since multiple threads may access instances simultaneously
            when creating connections.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MicrosoftSqlConnectionFactory.#ctor">
            <summary>
            Creates a new connection factory with a default BaseConnectionString property of
            'Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True;'.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MicrosoftSqlConnectionFactory.#ctor(System.String)">
            <summary>
            Creates a new connection factory with the given BaseConnectionString property.
            </summary>
            <param name="baseConnectionString"> The connection string to use for options to the database other than the 'Initial Catalog'. The 'Initial Catalog' will be prepended to this string based on the database name when CreateConnection is called. </param>
        </member>
        <member name="P:System.Data.Entity.Infrastructure.MicrosoftSqlConnectionFactory.BaseConnectionString">
            <summary>
            The connection string to use for options to the database other than the 'Initial Catalog'.
            The 'Initial Catalog' will  be prepended to this string based on the database name when
            CreateConnection is called.
            The default is 'Data Source=.\SQLEXPRESS; Integrated Security=True;'.
            </summary>
        </member>
        <member name="M:System.Data.Entity.Infrastructure.MicrosoftSqlConnectionFactory.CreateConnection(System.String)">
            <summary>
            Creates a connection for SQL Server based on the given database name or connection string.
            If the given string contains an '=' character then it is treated as a full connection string,
            otherwise it is treated as a database name only.
            </summary>
            <param name="nameOrConnectionString"> The database name or connection string. </param>
            <returns> An initialized DbConnection. </returns>
        </member>
        <member name="T:System.Data.Entity.SqlServer.MicrosoftSqlDbConfiguration">
            <summary>
            Default configuration.
            </summary>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlDbConfiguration.#ctor">
            <summary>
            Default configuration, used for code based configuration of this provider.
            </summary>
        </member>
        <member name="T:System.Data.Entity.SqlServer.MicrosoftSqlAzureExecutionStrategy">
            <summary>
            An <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy"/> that retries actions that throw exceptions caused by SQL Azure transient failures.
            </summary>
            <remarks>
            This execution strategy will retry the operation on <see cref="T:System.TimeoutException"/> and <see cref="T:Microsoft.Data.SqlClient.SqlException"/>
            if the <see cref="P:Microsoft.Data.SqlClient.SqlException.Errors"/> contains any of the following error numbers:
            40613, 40501, 40197, 10929, 10928, 10060, 10054, 10053, 233, 64 and 20
            </remarks>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlAzureExecutionStrategy.#ctor">
            <summary>
            Creates a new instance of <see cref="T:System.Data.Entity.SqlServer.MicrosoftSqlAzureExecutionStrategy" />.
            </summary>
            <remarks>
            The default retry limit is 5, which means that the total amount of time spent between retries is 26 seconds plus the random factor.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlAzureExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
            <summary>
            Creates a new instance of <see cref="T:System.Data.Entity.SqlServer.MicrosoftSqlAzureExecutionStrategy" /> with the specified limits for
            number of retries and the delay between retries.
            </summary>
            <param name="maxRetryCount"> The maximum number of retry attempts. </param>
            <param name="maxDelay"> The maximum delay in milliseconds between retries. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlAzureExecutionStrategy.ShouldRetryOn(System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:System.Data.Entity.SqlServer.SqlProviderManifest.SupportsParameterOptimizationInSchemaQueries">
            <summary>
            Indicates if the provider supports the parameter optimization described in EntityFramework6 GitHub issue #195.
            </summary>
            <returns><c>True</c> since this provider supports the parameter optimization.</returns>
        </member>
        <member name="T:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices">
            <summary>
            The DbProviderServices implementation for the Microsoft.Data.SqlClient provider for SQL Server.
            </summary>
            <remarks>
            Note that instance of this type also resolve additional provider services for Microsoft SQL Server
            when this type is registered as an EF provider either using an entry in the application's config file
            or through code-based registration in <see cref="T:System.Data.Entity.DbConfiguration" />.
            The services resolved are:
            Requests for <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory" /> are resolved to a Singleton instance of
            <see cref="T:System.Data.Entity.Infrastructure.MicrosoftLocalDbConnectionFactory" /> to create connections to LocalDB by default.
            Requests for <see cref="T:System.Func`1" /> for the invariant name "Microsoft.Data.SqlClient"
            for any server name are resolved to a delegate that returns a <see cref="T:System.Data.Entity.SqlServer.DefaultSqlExecutionStrategy" />
            to provide a non-retrying policy for SQL Server.
            Requests for <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> for the invariant name "Microsoft.Data.SqlClient" are
            resolved to <see cref="T:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator" /> instances to provide default Migrations SQL
            generation for SQL Server.
            Requests for <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> for the invariant name "Microsoft.Data.SqlClient" are
            resolved to a Singleton instance of <see cref="T:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices" /> to provide default spatial
            services for SQL Server.
            </remarks>
        </member>
        <member name="F:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.ProviderInvariantName">
            <summary>
            This is the well-known string using in configuration files and code-based configuration as
            the "provider invariant name" used to specify Microsoft SQL Server for ADO.NET and
            Entity Framework provider services.
            </summary>
        </member>
        <member name="P:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.Instance">
            <summary>
            The Singleton instance of the SqlProviderServices type.
            </summary>
        </member>
        <member name="P:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.SqlServerTypesAssemblyName">
            <summary>
            Set to the full name of the Microsoft.SqlServer.Types assembly to override the default selection
            </summary>
        </member>
        <member name="P:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.TruncateDecimalsToScale">
            <summary>
            Get or sets a value indicating whether <see cref="T:System.Decimal" /> parameter values are truncated to 
            the scale (number of decimal places) defined for their corresponding columns when they are sent 
            to the database. A value of <c>true</c> indicates that <see cref="T:Microsoft.Data.SqlClient.SqlParameter" /> objects 
            created for <see cref="T:System.Decimal" /> columns will have their <see cref="P:Microsoft.Data.SqlClient.SqlParameter.Scale" /> 
            properties set, which will cause the parameter values to be truncated. If set to <c>false</c> 
            then the <see cref="P:Microsoft.Data.SqlClient.SqlParameter.Scale" /> properties will not be set, avoiding the truncation 
            behavior of <see cref="T:Microsoft.Data.SqlClient.SqlParameter" /> and allowing SQL Server to round values if necessary. 
            The default value is <c>true</c> to prevent breaking existing applications that depend on this 
            behavior. 
            </summary>
        </member>
        <member name="P:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.UseScopeIdentity">
            <summary>
            Gets or sets a value indicating whether to use the SCOPE_IDENTITY() function to retrieve values 
            generated by the database for numeric columns during an INSERT operation. The default value of 
            <c>true</c> is recommended and can provide better performance if all numeric values are generated 
            using IDENTITY columns. If set to <c>false</c>, an OUTPUT clause will be used instead. An OUTPUT 
            clause makes it possible to retrieve values generated by sequences or other means.
            </summary>
        </member>
        <member name="P:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.UseRowNumberOrderingInOffsetQueries">
            <summary>
            Gets or sets a value indicating whether the ROW_NUMBER() function is used in sort expression 
            passed to the ORDER BY clause when OFFSET is present in query. The default value of <c>true</c> 
            is recommended to obtain query results that are stable for paging operations. The value of 
            <c>false</c> can be used for compatibility with previous versions of EF and will cause the sort 
            expression to be passed unmodified to the ORDER BY clause, which can lead to unstable results 
            if the ordering is ambiguous. 
            </summary>
            <remarks>
            This flag only applies to SQL Server 2012 or later. This flag does not affect queries that have 
            already been translated to SQL and cached, therefore applications that need to set the value to 
            <c>false</c> for compatibility should do so before executing any queries.
            </remarks>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
            <summary>
            Registers a handler to process non-error messages coming from the database provider.
            </summary>
            <param name="connection"> The connection to receive information for. </param>
            <param name="handler"> The handler to process messages. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
            <summary>
            Create a Command Definition object, given the connection and command tree
            </summary>
            <param name="providerManifest"> provider manifest that was determined from metadata </param>
            <param name="commandTree"> command tree for the statement </param>
            <returns> an executable command definition object </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.CloneDbCommand(System.Data.Common.DbCommand)">
            <summary>
            See issue 2390 - cloning the DesignTimeVisible property on the
            <see cref="T:System.Data.SqlClient.SqlCommand" /> can cause deadlocks.
            So here overriding to provide a method that does not clone DesignTimeVisible.
            </summary>
            <param name="fromDbCommand"> the <see cref="T:System.Data.Common.DbCommand" /> object to clone </param>
            <returns >a clone of the <see cref="T:System.Data.Common.DbCommand" /> </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
            <summary>
            Sets the parameter value and appropriate facets for the given <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage"/>.
            </summary>
            <param name="parameter">The parameter.</param>
            <param name="parameterType">The type of the parameter.</param>
            <param name="value">The value of the parameter.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
            <summary>
            Returns provider manifest token for a given connection.
            </summary>
            <param name="connection"> Connection to find manifest token from. </param>
            <returns> The provider manifest token for the specified connection. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.GetDbProviderManifest(System.String)">
            <summary>
            Returns the provider manifest by using the specified version information.
            </summary>
            <param name="versionHint"> The token information associated with the provider manifest. </param>
            <returns> The provider manifest by using the specified version information. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
            <summary>
            Gets a spatial data reader for SQL Server.
            </summary>
            <param name="fromReader"> The reader where the spatial data came from. </param>
            <param name="versionHint"> The manifest token associated with the provider manifest. </param>
            <returns> The spatial data reader. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.DbGetSpatialServices(System.String)">
            <summary>
            Gets a spatial data reader for SQL Server.
            </summary>
            <param name="versionHint"> The manifest token associated with the provider manifest. </param>
            <returns> The spatial data reader. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>
            Generates a data definition language (DDL) script that creates schema objects 
            (tables, primary keys, foreign keys) based on the contents of the StoreItemCollection 
            parameter and targeted for the version of the database corresponding to the provider manifest token.
            </summary>
            <param name="providerManifestToken"> The provider manifest token identifying the target version. </param>
            <param name="storeItemCollection"> The structure of the database. </param>
            <returns>
            A DDL script that creates schema objects based on the contents of the StoreItemCollection parameter 
            and targeted for the version of the database corresponding to the provider manifest token.
            </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>
            Create the database and the database objects.
            If initial catalog is not specified, but AttachDBFilename is specified, we generate a random database name based on the AttachDBFilename.
            Note: this causes pollution of the db, as when the connection string is later used, the mdf will get attached under a different name.
            However if we try to replicate the name under which it would be attached, the following scenario would fail:
            The file does not exist, but registered with database.
            The user calls:  If (DatabaseExists) DeleteDatabase
            CreateDatabase
            For further details on the behavior when AttachDBFilename is specified see Dev10# 188936
            </summary>
            <param name="connection">Connection to a non-existent database that needs to be created and populated with the store objects indicated with the storeItemCollection parameter.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to create the database.</param>
            <param name="storeItemCollection">The collection of all store items based on which the script should be created.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>
            Determines whether the database for the given connection exists.
            There are three cases:
            1.  Initial Catalog = X, AttachDBFilename = null:   (SELECT Count(*) FROM sys.databases WHERE [name]= X) > 0
            2.  Initial Catalog = X, AttachDBFilename = F:      if (SELECT Count(*) FROM sys.databases WHERE [name]= X) > 0 then <c>true</c>,
            if not, try to open the connection and then return (SELECT Count(*) FROM sys.databases WHERE [name]= X) > 0
            3.  Initial Catalog = null, AttachDBFilename = F:   Try to open the connection. If that succeeds the result is true, otherwise
            if the there are no databases corresponding to the given file return <c>false</c>, otherwise throw.
            Note: We open the connection to cover the scenario when the mdf exists, but is not attached.
            Given that opening the connection would auto-attach it, it would not be appropriate to return <c>false</c> in this case.
            Also note that checking for the existence of the file does not work for a remote server.  (Dev11 #290487)
            For further details on the behavior when AttachDBFilename is specified see Dev10# 188936
            </summary>
            <param name="connection">Connection to a database whose existence is checked by this method.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
            <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for determining database existence.</param>
            <returns>True if the provider can deduce the database only based on the connection.</returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
            <summary>
            Determines whether the database for the given connection exists.
            There are three cases:
            1.  Initial Catalog = X, AttachDBFilename = null:   (SELECT Count(*) FROM sys.databases WHERE [name]= X) > 0
            2.  Initial Catalog = X, AttachDBFilename = F:      if (SELECT Count(*) FROM sys.databases WHERE [name]= X) > 0 then <c>true</c>,
            if not, try to open the connection and then return (SELECT Count(*) FROM sys.databases WHERE [name]= X) > 0
            3.  Initial Catalog = null, AttachDBFilename = F:   Try to open the connection. If that succeeds the result is true, otherwise
            if the there are no databases corresponding to the given file return <c>false</c>, otherwise throw.
            Note: We open the connection to cover the scenario when the mdf exists, but is not attached.
            Given that opening the connection would auto-attach it, it would not be appropriate to return <c>false</c> in this case.
            Also note that checking for the existence of the file does not work for a remote server.  (Dev11 #290487)
            For further details on the behavior when AttachDBFilename is specified see Dev10# 188936
            </summary>
            <param name="connection">Connection to a database whose existence is checked by this method.</param>
            <param name="commandTimeout">Execution timeout for any commands needed to determine the existence of the database.</param>
            <param name="storeItemCollection">The collection of all store items from the model. This parameter is no longer used for determining database existence.</param>
            <returns>True if the provider can deduce the database only based on the connection.</returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
            <summary>
            Delete the database for the given connection.
            There are three cases:
            1.  If Initial Catalog is specified (X) drop database X
            2.  Else if AttachDBFilename is specified (F) drop all the databases corresponding to F
            if none throw
            3.  If niether the catalog not the file name is specified - throw
            Note that directly deleting the files does not work for a remote server.  However, even for not attached
            databases the current logic would work assuming the user does: if (DatabaseExists) DeleteDatabase
            </summary>
            <param name="connection"> Connection </param>
            <param name="commandTimeout"> Timeout for internal commands. </param>
            <param name="storeItemCollection"> Item Collection. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlProviderServices.CloneDbConnection(System.Data.Common.DbConnection,System.Data.Common.DbProviderFactory)">
            <summary>
            Clones the connection.
            </summary>
            <param name="connection">The original connection.</param>
            <param name="factory">The factory to use.</param>
            <returns>Cloned connection</returns>
        </member>
        <member name="T:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator">
            <summary>
            Provider to convert provider agnostic migration operations into SQL commands
            that can be run against a Microsoft SQL Server database.
            </summary>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.IsPermissionDeniedError(System.Exception)">
            <summary>
            Determines if a provider specific exception corresponds to a database-level permission denied error.
            </summary>
            <param name="exception">The database exception.</param>
            <returns> true if the supplied exception corresponds to a database-level permission denied error; otherwise false. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
            <summary>
            Converts a set of migration operations into Microsoft SQL Server specific SQL.
            </summary>
            <param name="migrationOperations"> The operations to be converted. </param>
            <param name="providerManifestToken"> Token representing the version of SQL Server being targeted (i.e. "2005", "2008"). </param>
            <returns> A list of SQL statements to be executed to perform the migration operations. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)">
            <summary>
            Generates the SQL body for a stored procedure.
            </summary>
            <param name="commandTrees">The command trees representing the commands for an insert, update or delete operation.</param>
            <param name="rowsAffectedParameter">The rows affected parameter name.</param>
            <param name="providerManifestToken">The provider manifest token.</param>
            <returns>The SQL body for the stored procedure.</returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.UpdateDatabaseOperation)">
            <summary>
            Generates the specified update database operation which represents applying a series of migrations.
            The generated script is idempotent, meaning it contains conditional logic to check if individual migrations 
            have already been applied and only apply the pending ones.
            </summary>
            <param name="updateDatabaseOperation">The update database operation.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MigrationOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.MigrationOperation" />.
            Allows derived providers to handle additional operation types.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="migrationOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.CreateConnection">
            <summary>
            Creates an empty connection for the current provider.
            Allows derived providers to use connection other than <see cref="T:Microsoft.Data.SqlClient.SqlConnection" />.
            </summary>
            <returns> An empty connection for the current provider. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation)">
            <summary>
            Generates the specified create procedure operation.
            </summary>
            <param name="createProcedureOperation">The create procedure operation.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation)">
            <summary>
            Generates the specified alter procedure operation.
            </summary>
            <param name="alterProcedureOperation">The alter procedure operation.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation)">
            <summary>
            Generates the specified drop procedure operation.
            </summary>
            <param name="dropProcedureOperation">The drop procedure operation.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />. This method differs from
            <see cref="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.WriteCreateTable(System.Data.Entity.Migrations.Model.CreateTableOperation)" /> in that it will
            create the target database schema if it does not already exist.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="createTableOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.WriteCreateTable(System.Data.Entity.Migrations.Model.CreateTableOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="createTableOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.WriteCreateTable(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Writes CREATE TABLE SQL to the target writer.
            </summary>
            <param name="createTableOperation"> The operation to produce SQL for. </param>
            <param name="writer"> The target writer. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation)">
            <summary>
            Override this method to generate SQL when the definition of a table or its attributes are changed.
            The default implementation of this method does nothing.
            </summary>
            <param name="alterTableOperation"> The operation describing changes to the table. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.GenerateMakeSystemTable(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates SQL to mark a table as a system table.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="createTableOperation"> The table to mark as a system table. </param>
            <param name="writer"> The <see cref='T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter' /> to write the generated SQL to. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.GenerateCreateSchema(System.String)">
            <summary>
            Generates SQL to create a database schema.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="schema"> The name of the schema to create. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="addForeignKeyOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="dropForeignKeyOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="createIndexOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="dropIndexOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="addPrimaryKeyOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="dropPrimaryKeyOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="addColumnOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="dropColumnOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="alterColumnOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.DropDefaultConstraint(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Call this method to generate SQL that will attempt to drop the default constraint created
            when a column is created. This method is usually called by code that overrides the creation or
            altering of columns.
            </summary>
            <param name="table">The table to which the constraint applies.</param>
            <param name="column">The column to which the constraint applies.</param>
            <param name="writer">The writer to which generated SQL should be written.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="dropTableOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.
            Generated SQL should be added using the Statement or StatementBatch methods.
            </summary>
            <param name="sqlOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="renameColumnOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="renameIndexOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="renameTableOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation)">
            <summary>
            Generates the specified rename procedure operation.
            </summary>
            <param name="renameProcedureOperation">The rename procedure operation.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation)">
            <summary>
            Generates the specified move procedure operation.
            </summary>
            <param name="moveProcedureOperation">The move procedure operation.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="moveTableOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
            <summary>
            Generates SQL for the given column model. This method is called by other methods that
            process columns and can be overridden to change the SQL generated.
            </summary>
            <param name="column">The column for which SQL is being generated.</param>
            <param name="writer">The writer to which generated SQL should be written.</param>
        </member>
        <member name="P:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.GuidColumnDefault">
            <summary>
            Returns the column default value to use for store-generated GUID columns when
            no default value is explicitly specified in the migration.
            Returns newsequentialid() for on-premises SQL Server 2005 and later.
            Returns newid() for SQL Azure.
            </summary>
            <value>Either newsequentialid() or newid() as described above.</value>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Migrations.Model.HistoryOperation)">
            <summary>
            Generates SQL for a <see cref="T:System.Data.Entity.Migrations.Model.HistoryOperation" />.
            Generated SQL should be added using the Statement method.
            </summary>
            <param name="historyOperation"> The operation to produce SQL for. </param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Byte[])">
            <summary>
            Generates SQL to specify a constant byte[] default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Boolean)">
            <summary>
            Generates SQL to specify a constant bool default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.DateTime)">
            <summary>
            Generates SQL to specify a constant DateTime default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.DateTimeOffset)">
            <summary>
            Generates SQL to specify a constant DateTimeOffset default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Guid)">
            <summary>
            Generates SQL to specify a constant Guid default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.String)">
            <summary>
            Generates SQL to specify a constant string default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.TimeSpan)">
            <summary>
            Generates SQL to specify a constant TimeSpan default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Hierarchy.HierarchyId)">
            <summary>
            Generates SQL to specify a constant hierarchyid default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
            <summary>
            Generates SQL to specify a constant geogrpahy default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
            <summary>
            Generates SQL to specify a constant geometry default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Generate(System.Object)">
            <summary>
            Generates SQL to specify a constant default value being set on a column.
            This method just generates the actual value, not the SQL to set the default value.
            </summary>
            <param name="defaultValue"> The value to be set. </param>
            <returns> SQL representing the default value. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.BuildColumnType(System.Data.Entity.Migrations.Model.ColumnModel)">
            <summary>
            Generates SQL to specify the data type of a column.
            This method just generates the actual type, not the SQL to create the column.
            </summary>
            <param name="columnModel"> The definition of the column. </param>
            <returns> SQL representing the data type. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Name(System.String)">
            <summary>
            Generates a quoted name. The supplied name may or may not contain the schema.
            </summary>
            <param name="name"> The name to be quoted. </param>
            <returns> The quoted name. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Quote(System.String)">
            <summary>
            Quotes an identifier for SQL Server.
            </summary>
            <param name="identifier"> The identifier to be quoted. </param>
            <returns> The quoted identifier. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Statement(System.String,System.Boolean,System.String)">
            <summary>
            Adds a new Statement to be executed against the database.
            </summary>
            <param name="sql"> The statement to be executed. </param>
            <param name="suppressTransaction"> Gets or sets a value indicating whether this statement should be performed outside of the transaction scope that is used to make the migration process transactional. If set to true, this operation will not be rolled back if the migration process fails. </param>
            <param name="batchTerminator">The batch terminator for the database provider.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Writer">
            <summary>
            Gets a new <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" /> that can be used to build SQL.
            This is just a helper method to create a writer. Writing to the writer will
            not cause SQL to be registered for execution. You must pass the generated
            SQL to the Statement method.
            </summary>
            <returns> An empty text writer to use for SQL generation. </returns>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.Statement(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String)">
            <summary>
            Adds a new Statement to be executed against the database.
            </summary>
            <param name="writer"> The writer containing the SQL to be executed. </param>
            <param name="batchTerminator">The batch terminator for the database provider.</param>
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlServerMigrationSqlGenerator.StatementBatch(System.String,System.Boolean)">
            <summary>
            Breaks sql string into one or more statements, handling T-SQL utility statements as necessary.
            </summary>
            <param name="sqlBatch"> The SQL to split into one ore more statements to be executed. </param>
            <param name="suppressTransaction"> Gets or sets a value indicating whether this statement should be performed outside of the transaction scope that is used to make the migration process transactional. If set to true, this operation will not be rolled back if the migration process fails. </param>
        </member>
        <member name="T:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices">
            <summary>
            An implementation of <see cref="T:System.Data.Entity.Spatial.DbSpatialServices"/> to provide support for geospatial types when using
            Entity Framework with Microsoft SQL Server.
            </summary>
        </member>
        <member name="P:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.NativeTypesAvailable">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeographyWellKnownValue)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyFromProviderValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeometryWellKnownValue)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryFromProviderValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyFromText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyPointFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyLineFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyFromBinary(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyFromGml(System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeographyFromGml(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.AsText(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeography,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Distance(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Union(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Difference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetLatitude(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetLongitude(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeography)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryFromText(System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryPointFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryLineFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryFromBinary(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryFromGml(System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GeometryFromGml(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetEnvelope(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.AsText(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetIsSimple(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetBoundary(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetIsValid(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Touches(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Crosses(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Within(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Contains(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Overlaps(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Relate(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry,System.String)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeometry,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Distance(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetConvexHull(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Union(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.Difference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetXCoordinate(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetYCoordinate(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetIsRing(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetCentroid(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetPointOnSurface(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetExteriorRing(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.GetInteriorRingCount(System.Data.Entity.Spatial.DbGeometry)">
            <inheritdoc />
        </member>
        <member name="M:System.Data.Entity.SqlServer.MicrosoftSqlSpatialServices.InteriorRingAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
            <inheritdoc />
        </member>
    </members>
</doc>
